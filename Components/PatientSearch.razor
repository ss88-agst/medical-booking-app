@using Microsoft.AspNetCore.Components
@using System.Globalization;

<MudText Typo="Typo.body1" Style="font-weight:bold">Patient Information</MudText>
<MudGrid Class="gap-y-0 mt-2">
    <MudItem xs="12">
        <label> Enter First Name</label>
        <MudTextField T="String" @bind-Value="selectedName" Placeholder="Patient's First Name" Variant="Variant.Outlined" Margin="Margin.Dense" />
    </MudItem>
    <MudItem xs="12">
        <label> Enter Last Name</label>
        <MudTextField T="String" @bind-Value="selectedLastName" Placeholder="Patient's Last Name" Variant="Variant.Outlined" Margin="Margin.Dense" />
    </MudItem>
    <MudItem xs="12">
        <MudText Typo="Typo.caption">Patient's Date of Birth</MudText>
    </MudItem>
    <MudItem xs="4">
        <MudSelect Dense="true" @bind-Value="selectedMonth" Label="Month" Placeholder="Please Select">
            <MudSelectItem Value="@("January")">January</MudSelectItem>
            <MudSelectItem Value="@("February")">Februrary</MudSelectItem>
            <MudSelectItem Value="@("March")">March</MudSelectItem>

            <MudSelectItem Value="@("April")">April</MudSelectItem>
            <MudSelectItem Value="@("May")">May</MudSelectItem>
            <MudSelectItem Value="@("June")">June</MudSelectItem>

            <MudSelectItem Value="@("July")">July</MudSelectItem>
            <MudSelectItem Value="@("August")">August</MudSelectItem>
            <MudSelectItem Value="@("September")">September</MudSelectItem>

            <MudSelectItem Value="@("October")">October</MudSelectItem>
            <MudSelectItem Value="@("November")">November</MudSelectItem>
            <MudSelectItem Value="@("December")">December</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs="4">
        <MudSelect Dense="true" T="int" Label="Day" @bind-Value="selectedDay">
            @foreach (var day in days)
            {
                <MudSelectItem Value="@day" />
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="4">
        <MudSelect Dense="true" T="int" Label="Year" @bind-Value="selectedYear">
            @foreach (var year in years)
            {
                <MudSelectItem Value="@year" />
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12">
        <div class="d-flex mud-width-full align-center">
            <label> Birthdate Selected: </label>
            <MudChip>@selectedMonth @selectedDay, @selectedYear</MudChip>
        </div>
    </MudItem>
    <MudItem xs="12" Class="d-flex justify-content-center">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSearch">Search Patient</MudButton>
    </MudItem>

    
</MudGrid>

@code {
    [Parameter]
    public Patient? isPatientFound { get; set; }
    public bool showAddPatient = false;

    string selectedName = "";
    string selectedLastName = "";

    [Parameter]
    public EventCallback<Patient> isPatientFoundChanged { get; set; }

    async Task UpdateIsPatientFound (Patient value)
    {
        await isPatientFoundChanged.InvokeAsync(value);
    }

    [Inject] private IDialogService DialogService { get; set; }

    string state = "Patient Not Selected";


    private async void OnSearch()
    {
        //do search here first
        var sequence = Patient.samplePatients.Where(t => t.patientFirstName.Equals(selectedName)
        && t.patientLastName.Equals(selectedLastName) && t.dob.Equals(new DateTime(selectedYear, 
            DateTime.ParseExact(selectedMonth, "MMMM", CultureInfo.CurrentCulture).Month, selectedDay)));

        Patient searchResult = null;

        if (sequence.Count() > 0) {
            bool? result = await DialogService.ShowMessageBox(
            "Patient Found",
            (MarkupString)$"{selectedName + " " + selectedLastName}<br/>{selectedDay + " " + selectedMonth + " " + selectedYear}<br/>{sequence.First().email}<br/>{sequence.First().phone}<br/>{sequence.First().usualDoctor}",
            yesText: "Select", cancelText: "Close");
            state = result == null ? "Patient Not Selected" : "Patient Selected";
            StateHasChanged();
            searchResult = sequence.First();
        }
        else
        {
            var dialogparams = new DialogParameters();
            Patient.patientNotFoundReference = new Patient("", selectedName, selectedLastName, "", "", new DateTime(selectedYear, DateTime.ParseExact(selectedMonth, "MMMM", CultureInfo.CurrentCulture).Month, selectedDay));
            var res = DialogService.Show<PatientNotFound>("Add Patient", dialogparams);
            var t = await res.Result;
            state = !t.Cancelled ? "Patient Selected" : "Patient Not Selected";
            //this.StateHasChanged(); 
            if (state.Equals("Patient Selected"))
            {
                searchResult = (Patient) t.Data;
                Patient.samplePatients.Append(searchResult);
                Patient.patientNotFoundReference = new Patient(); //
            }
        }

        if (state.Equals("Patient Selected"))
        {
            isPatientFound = searchResult;
            await UpdateIsPatientFound(isPatientFound);
        }
        else
        {
            //isPatientFound = false;
        }
    }

    DateTime? date = DateTime.Today;
    string selectedMonth = "January";
    int selectedDay = 1;
    int selectedYear = 1950;
    private string stringValue { get; set; }
    private int[] days = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };
    private int[] years = { 1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,
1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022, };

}
